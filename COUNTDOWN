import tkinter as tk
import datetime


class CountdownApp:
    def __init__(self, master):
        self.master = master
        self.master.title("정보처리기사 필기 합격 가보자고!")
        self.master.attributes("-fullscreen", True)
        self.end_date = datetime.datetime(2023, 5, 13)
        self.remaining_time_str = tk.StringVar(value=self.get_remaining_time())
        self.remaining_time_label = tk.Label(
            self.master,
            textvariable=self.remaining_time_str,
            font=("Arial", 96),
            fg="blue",
            # |코드에서 "bg" 변수에 "gray" 값을 할당하는 부분입니다. 이 부분의 좋은 점은 코드의 가독성을 높이고, 배경색을 쉽게 변경할 수 있다는 것입니다. 그러나 이 코드 자체로는 문제가 없으나, 다른 코드와 함께 사용될 때 일관성 있는 네이밍 규칙을 적용해야 합니다. 예를 들어, 다른 변수나 함수 이름과 구분하기 위해 "bg_color"와 같은 이름을 사용하는 것이 좋습니다.
            bg="gray",
        )
        self.remaining_time_label.pack(pady=20)

        # Create image label
        self.image_label = tk.Label(self.master)
        self.image_label.pack(pady=10)

        self.message_label = tk.Label(
            self.master,
            text="조수현 아자아자 화이팅!",
            font=("Arial", 48),
            fg="white",
            bg="green",
        )
        self.message_label.pack(pady=10)

        # Load image and set it to the image label
        self.kakao_image = tk.PhotoImage(file="shsu.png")
        self.image_label.configure(image=self.kakao_image)

        self.countdown()


    def get_remaining_time(self):
        remaining = self.end_date - datetime.datetime.now()
        days, seconds = remaining.days, remaining.seconds
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds = seconds % 60
        remaining_time = f"{days:02}:{hours:02}:{minutes:02}:{seconds:02}"
        return remaining_time

    def countdown(self):
        self.remaining_time_str.set(self.get_remaining_time())
        if datetime.datetime.now() >= self.end_date:
            self.remaining_time_str.set("Time's up!")
            return
        self.master.after(1000, self.countdown)


if __name__ == "__main__":
    # Tkinter 모듈을 사용하여 root 윈도우를 생성합니다.
    root = tk.Tk()
    # CountdownApp 클래스의 인스턴스를 생성하고, root 윈도우를 인자로 전달합니다.
    app = CountdownApp(root)
    # root 윈도우를 유지하며, 이벤트 루프를 실행합니다.
    root.mainloop()
